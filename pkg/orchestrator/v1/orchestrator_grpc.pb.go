// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: api/orchestrator/v1/orchestrator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	QueryOrchestratorService_Search_FullMethodName = "/orchestrator.v1.QueryOrchestratorService/Search"
)

// QueryOrchestratorServiceClient is the client API for QueryOrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// QueryOrchestratorService is the main entry point for search queries.
type QueryOrchestratorServiceClient interface {
	// Search performs a search query against the expert network.
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type queryOrchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryOrchestratorServiceClient(cc grpc.ClientConnInterface) QueryOrchestratorServiceClient {
	return &queryOrchestratorServiceClient{cc}
}

func (c *queryOrchestratorServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, QueryOrchestratorService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryOrchestratorServiceServer is the server API for QueryOrchestratorService service.
// All implementations must embed UnimplementedQueryOrchestratorServiceServer
// for forward compatibility
//
// QueryOrchestratorService is the main entry point for search queries.
type QueryOrchestratorServiceServer interface {
	// Search performs a search query against the expert network.
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedQueryOrchestratorServiceServer()
}

// UnimplementedQueryOrchestratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryOrchestratorServiceServer struct {
}

func (UnimplementedQueryOrchestratorServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedQueryOrchestratorServiceServer) mustEmbedUnimplementedQueryOrchestratorServiceServer() {
}

// UnsafeQueryOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryOrchestratorServiceServer will
// result in compilation errors.
type UnsafeQueryOrchestratorServiceServer interface {
	mustEmbedUnimplementedQueryOrchestratorServiceServer()
}

func RegisterQueryOrchestratorServiceServer(s grpc.ServiceRegistrar, srv QueryOrchestratorServiceServer) {
	s.RegisterService(&QueryOrchestratorService_ServiceDesc, srv)
}

func _QueryOrchestratorService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryOrchestratorServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryOrchestratorService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryOrchestratorServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryOrchestratorService_ServiceDesc is the grpc.ServiceDesc for QueryOrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryOrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestrator.v1.QueryOrchestratorService",
	HandlerType: (*QueryOrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _QueryOrchestratorService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/orchestrator/v1/orchestrator.proto",
}

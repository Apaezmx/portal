// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: api/rag/v1/rag.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RAGService_IndexContent_FullMethodName    = "/rag.v1.RAGService/IndexContent"
	RAGService_RetrieveContext_FullMethodName = "/rag.v1.RAGService/RetrieveContext"
)

// RAGServiceClient is the client API for RAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RAGService provides methods for indexing and retrieving content.
type RAGServiceClient interface {
	// IndexContent processes and stores content for a given URL.
	IndexContent(ctx context.Context, in *IndexContentRequest, opts ...grpc.CallOption) (*IndexContentResponse, error)
	// RetrieveContext retrieves relevant context chunks for a query.
	RetrieveContext(ctx context.Context, in *RetrieveContextRequest, opts ...grpc.CallOption) (*RetrieveContextResponse, error)
}

type rAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRAGServiceClient(cc grpc.ClientConnInterface) RAGServiceClient {
	return &rAGServiceClient{cc}
}

func (c *rAGServiceClient) IndexContent(ctx context.Context, in *IndexContentRequest, opts ...grpc.CallOption) (*IndexContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexContentResponse)
	err := c.cc.Invoke(ctx, RAGService_IndexContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rAGServiceClient) RetrieveContext(ctx context.Context, in *RetrieveContextRequest, opts ...grpc.CallOption) (*RetrieveContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveContextResponse)
	err := c.cc.Invoke(ctx, RAGService_RetrieveContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RAGServiceServer is the server API for RAGService service.
// All implementations must embed UnimplementedRAGServiceServer
// for forward compatibility
//
// RAGService provides methods for indexing and retrieving content.
type RAGServiceServer interface {
	// IndexContent processes and stores content for a given URL.
	IndexContent(context.Context, *IndexContentRequest) (*IndexContentResponse, error)
	// RetrieveContext retrieves relevant context chunks for a query.
	RetrieveContext(context.Context, *RetrieveContextRequest) (*RetrieveContextResponse, error)
	mustEmbedUnimplementedRAGServiceServer()
}

// UnimplementedRAGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRAGServiceServer struct {
}

func (UnimplementedRAGServiceServer) IndexContent(context.Context, *IndexContentRequest) (*IndexContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexContent not implemented")
}
func (UnimplementedRAGServiceServer) RetrieveContext(context.Context, *RetrieveContextRequest) (*RetrieveContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveContext not implemented")
}
func (UnimplementedRAGServiceServer) mustEmbedUnimplementedRAGServiceServer() {}

// UnsafeRAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RAGServiceServer will
// result in compilation errors.
type UnsafeRAGServiceServer interface {
	mustEmbedUnimplementedRAGServiceServer()
}

func RegisterRAGServiceServer(s grpc.ServiceRegistrar, srv RAGServiceServer) {
	s.RegisterService(&RAGService_ServiceDesc, srv)
}

func _RAGService_IndexContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).IndexContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_IndexContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).IndexContent(ctx, req.(*IndexContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RAGService_RetrieveContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RAGServiceServer).RetrieveContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RAGService_RetrieveContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RAGServiceServer).RetrieveContext(ctx, req.(*RetrieveContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RAGService_ServiceDesc is the grpc.ServiceDesc for RAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag.v1.RAGService",
	HandlerType: (*RAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndexContent",
			Handler:    _RAGService_IndexContent_Handler,
		},
		{
			MethodName: "RetrieveContext",
			Handler:    _RAGService_RetrieveContext_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/rag/v1/rag.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: api/expert/v1/expert.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExpertService_CreateOrUpdateExpert_FullMethodName = "/expert.v1.ExpertService/CreateOrUpdateExpert"
	ExpertService_QueryExpert_FullMethodName          = "/expert.v1.ExpertService/QueryExpert"
)

// ExpertServiceClient is the client API for ExpertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExpertService manages the lifecycle and querying of Leaf Experts.
type ExpertServiceClient interface {
	// CreateOrUpdateExpert creates a new expert or updates an existing one.
	CreateOrUpdateExpert(ctx context.Context, in *CreateOrUpdateExpertRequest, opts ...grpc.CallOption) (*CreateOrUpdateExpertResponse, error)
	// QueryExpert gets a response from a specific Leaf Expert.
	QueryExpert(ctx context.Context, in *QueryExpertRequest, opts ...grpc.CallOption) (*QueryExpertResponse, error)
}

type expertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpertServiceClient(cc grpc.ClientConnInterface) ExpertServiceClient {
	return &expertServiceClient{cc}
}

func (c *expertServiceClient) CreateOrUpdateExpert(ctx context.Context, in *CreateOrUpdateExpertRequest, opts ...grpc.CallOption) (*CreateOrUpdateExpertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateExpertResponse)
	err := c.cc.Invoke(ctx, ExpertService_CreateOrUpdateExpert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expertServiceClient) QueryExpert(ctx context.Context, in *QueryExpertRequest, opts ...grpc.CallOption) (*QueryExpertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExpertResponse)
	err := c.cc.Invoke(ctx, ExpertService_QueryExpert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpertServiceServer is the server API for ExpertService service.
// All implementations must embed UnimplementedExpertServiceServer
// for forward compatibility
//
// ExpertService manages the lifecycle and querying of Leaf Experts.
type ExpertServiceServer interface {
	// CreateOrUpdateExpert creates a new expert or updates an existing one.
	CreateOrUpdateExpert(context.Context, *CreateOrUpdateExpertRequest) (*CreateOrUpdateExpertResponse, error)
	// QueryExpert gets a response from a specific Leaf Expert.
	QueryExpert(context.Context, *QueryExpertRequest) (*QueryExpertResponse, error)
	mustEmbedUnimplementedExpertServiceServer()
}

// UnimplementedExpertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpertServiceServer struct {
}

func (UnimplementedExpertServiceServer) CreateOrUpdateExpert(context.Context, *CreateOrUpdateExpertRequest) (*CreateOrUpdateExpertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateExpert not implemented")
}
func (UnimplementedExpertServiceServer) QueryExpert(context.Context, *QueryExpertRequest) (*QueryExpertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExpert not implemented")
}
func (UnimplementedExpertServiceServer) mustEmbedUnimplementedExpertServiceServer() {}

// UnsafeExpertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpertServiceServer will
// result in compilation errors.
type UnsafeExpertServiceServer interface {
	mustEmbedUnimplementedExpertServiceServer()
}

func RegisterExpertServiceServer(s grpc.ServiceRegistrar, srv ExpertServiceServer) {
	s.RegisterService(&ExpertService_ServiceDesc, srv)
}

func _ExpertService_CreateOrUpdateExpert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateExpertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpertServiceServer).CreateOrUpdateExpert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpertService_CreateOrUpdateExpert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpertServiceServer).CreateOrUpdateExpert(ctx, req.(*CreateOrUpdateExpertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpertService_QueryExpert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpertServiceServer).QueryExpert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExpertService_QueryExpert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpertServiceServer).QueryExpert(ctx, req.(*QueryExpertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpertService_ServiceDesc is the grpc.ServiceDesc for ExpertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expert.v1.ExpertService",
	HandlerType: (*ExpertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateExpert",
			Handler:    _ExpertService_CreateOrUpdateExpert_Handler,
		},
		{
			MethodName: "QueryExpert",
			Handler:    _ExpertService_QueryExpert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/expert/v1/expert.proto",
}
